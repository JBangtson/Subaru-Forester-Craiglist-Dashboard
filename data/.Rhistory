})
# Create the ggplot2 plot based on the reactive data
output$plot <- renderPlot({
ggplot(reactive_data(), aes(x = .data[[input$xvar]], y = .data[[input$yvar]])) +
geom_point()
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
print(paste("Probability that the value of the stock is more than $19 = ",
round(punif(19, 16, 25, log = FALSE),4)))
print(paste("Probability that the value of the stock is more than $19 = ",
1-round(punif(19, 16, 25, log = FALSE),4)))
# Find the probability that the value of the stock is more than $19.
print(paste("Probability that the value of the stock is more than $19 = ",
1-round(punif(19, 16, 25, log = FALSE),4)))
print(paste("Probability that the value of the stock is between $19 and $22 = ",
round(punif(19, 16, 25, log = FALSE) - punif(22, 16, 25, log = FALSE),4)))
# Find the probability that the value of the stock is between $19 and $22.
print(paste("Probability that the value of the stock is between $19 and $22 = ",
round(punif(22, 16, 25, log = FALSE) - punif(19, 16, 25, log = FALSE),4)))
# Find the probability that the value of the stock is between $19 and $22.
print(paste("Probability that the value of the stock is between $19 and $22 = ",
round(punif(22, 16, 25, log = FALSE) - punif(19, 16, 25, log = FALSE),4)))
# The upper quartile
print(paste("The 25th percentile is $",qunif(0.25, 16, 25, lower.tail = TRUE, log.p = FALSE)))
# The upper quartile
print(paste("The 25th percentile is $",qunif(0.25, 16, 25, lower.tail = TRUE, log.p = FALSE)))
print(paste("Probability that the value of the stock is more than $21 given the stock is greater than $18 = ",
1-round(punif(21, 18, 25, log = FALSE),4)))
print(paste("Probability that the value of the stock is more than $21 given the stock is greater than $18 = ",
1-round(punif(21, 18, 25, log = FALSE),4)))
print(paste("Probability that the time between two successive visits to the urgent care facility is less than 2 minutes.",
1 - round(pexp(2, (1/7), lower.tail = TRUE, log = FALSE),4)))
print(paste("Probability that the time between two successive visits to the urgent care facility is less than 2 minutes.",
round(pexp(2, (1/7), lower.tail = TRUE, log = FALSE),4)))
#Find the probability that the time between two successive visits to the urgent care facility is more than 15 minutes.
print(paste("Probability that the time between two successive visits to the urgent care facility is more than 15 minutes.",
1-round(pexp(15, (1/7), lower.tail = TRUE, log = FALSE),4)))
print(paste("The 5oth percentile is ", round(qexp(0.50, (1/7), lower.tail = TRUE, log.p = FALSE),4)))
print(paste("probability that the duration of next visit is less than 5 minutess",
round(pexp(5, (1/7), lower.tail = TRUE, log = FALSE),4)))
print(paste("probability that more than eight patients arrive during a half-hour period.",
1-round(ppois(8, 30/7, lower.tail = TRUE, log = FALSE),4)))
print(paste("probability that more than eight patients arrive during a half-hour period.",
1-round(ppois(8, ((1/7)*30), lower.tail = TRUE, log = FALSE),4)))
ui <- fluidPage(
titlePanel("Interactive GGplot2 Example"),
sidebarLayout(
sidebarPanel(
sliderInput("slider", "Select a value:", min = 0, max = 40000, value = c(0, 40000)),
selectInput("xvar", "Select X-axis Variable:", choices = names(subi_forester)[c(7, 15)], selected = names(subi_forester)[15]),
selectInput("yvar", "Select Y-axis Variable:", choices = names(subi_forester)[c(7, 15)], selected = names(subi_forester)[7])
),
mainPanel(
plotOutput("plot"), # This is where the ggplot2 plot will be displayed
tableOutput("table")
)
)
)
server <- function(input, output) {
reactive_data <- reactive({
data <- subi_forester[, c(input$xvar, input$yvar, "url")]
filtered_data <- data[data[, input$xvar] <= input$slider[2] & data[, input$xvar] >= input$slider[1], ]
return(filtered_data)
})
output$plot <- renderPlot({
p <- ggplot(reactive_data(), aes(x = .data[[input$xvar]], y = .data[[input$yvar]], color = .data[[input$xvar]])) +
geom_point() +
scale_color_gradient(low = "blue", high = "red")  # Gradient color scale
p
})
output$table <- renderTable({
data <- reactive_data()
data %>% mutate(
price = scales::number_format(scale = 1e-3, suffix = "K", big.mark = ","),
odometer = scales::comma_format(big.mark = ",")
)
})
}
shinyApp(ui = ui, server = server)
library(ggplot2)
library(dplyr)
library(ggforce)
library(lubridate)
library(shiny)
#HomePC
workingdirectory = 'E:\\E01_College\\002_CurrentClasses\\03_MBA-694_TellingStoriesWithData\\Telling-Stories-Part-2-SubaruForesters-Dashboard\\data'
setwd(workingdirectory)
subi_forester = read.csv(paste(workingdirectory,"\\subaruForesters_Carbitrage.csv",sep=""))
ui <- fluidPage(
titlePanel("Interactive GGplot2 Example"),
sidebarLayout(
sidebarPanel(
sliderInput("slider", "Select a value:", min = 0, max = 40000, value = c(0, 40000)),
selectInput("xvar", "Select X-axis Variable:", choices = names(subi_forester)[c(7, 15)], selected = names(subi_forester)[15]),
selectInput("yvar", "Select Y-axis Variable:", choices = names(subi_forester)[c(7, 15)], selected = names(subi_forester)[7])
),
mainPanel(
plotOutput("plot"), # This is where the ggplot2 plot will be displayed
tableOutput("table")
)
)
)
server <- function(input, output) {
reactive_data <- reactive({
data <- subi_forester[, c(input$xvar, input$yvar, "url")]
filtered_data <- data[data[, input$xvar] <= input$slider[2] & data[, input$xvar] >= input$slider[1], ]
return(filtered_data)
})
output$plot <- renderPlot({
p <- ggplot(reactive_data(), aes(x = .data[[input$xvar]], y = .data[[input$yvar]], color = .data[[input$xvar]])) +
geom_point() +
scale_color_gradient(low = "blue", high = "red")  # Gradient color scale
p
})
output$table <- renderTable({
data <- reactive_data()
data %>% mutate(
price = scales::number_format(scale = 1e-3, suffix = "K", big.mark = ","),
odometer = scales::comma_format(big.mark = ",")
)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Interactive GGplot2 Example"),
sidebarLayout(
sidebarPanel(
sliderInput("slider", "Select a value:", min = 0, max = 40000, value = c(0, 40000)),
selectInput("xvar", "Select X-axis Variable:", choices = names(subi_forester)[c(7, 15)], selected = names(subi_forester)[15]),
selectInput("yvar", "Select Y-axis Variable:", choices = names(subi_forester)[c(7, 15)], selected = names(subi_forester)[7])
),
mainPanel(
plotOutput("plot"), # This is where the ggplot2 plot will be displayed
tableOutput("table")
)
)
)
server <- function(input, output) {
reactive_data <- reactive({
data <- subi_forester[, c(input$xvar, input$yvar, "url")]
filtered_data <- data[data[, input$xvar] <= input$slider[2] & data[, input$xvar] >= input$slider[1], ]
return(filtered_data)
})
output$plot <- renderPlot({
p <- ggplot(reactive_data(), aes(x = .data[[input$xvar]], y = .data[[input$yvar]], color = .data[[input$xvar]])) +
geom_point() +
scale_color_gradient(low = "blue", high = "red")  # Gradient color scale
p
})
output$table <- renderTable({
data <- reactive_data()
data %>% mutate(
price = scales::number_format(scale = 1e-3, suffix = "K", big.mark = ","),
odometer = scales::comma_format(big.mark = ",")
) %>%
as.data.frame()  # Convert the data into a data frame
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Interactive GGplot2 Example"),
sidebarLayout(
sidebarPanel(
sliderInput("slider", "Select a value:", min = 0, max = 40000, value = c(0, 40000)),
selectInput("xvar", "Select X-axis Variable:", choices = names(subi_forester)[c(7, 15)], selected = names(subi_forester)[15]),
selectInput("yvar", "Select Y-axis Variable:", choices = names(subi_forester)[c(7, 15)], selected = names(subi_forester)[7])
),
mainPanel(
plotOutput("plot"), # This is where the ggplot2 plot will be displayed
tableOutput("table")
)
)
)
server <- function(input, output) {
# Create a reactive object that depends on the slider input
reactive_data <- reactive({
data <- subi_forester[, c(input$xvar, input$yvar, "url")]
filtered_data <- data[data[, input$xvar] <= input$slider[2] & data[, input$xvar] >= input$slider[1], ]
return(filtered_data)
})
# Create the ggplot2 plot based on the reactive data
output$plot <- renderPlot({
ggplot(reactive_data(), aes(x = .data[[input$xvar]], y = .data[[input$yvar]])) +
geom_point()
})
# Create a table to display the data points
output$table <- renderTable({
reactive_data()
})
}
shinyApp(ui = ui, server = server)
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
google_token <- create_token(api_key = apiKey)
install.packages("googleway")
library(ggplot2)
library(dplyr)
library(ggforce)
library(shiny)
library(googleway)
#Laptop
workingdirectory = 'C:\\Users\\Bangt\\01_College\\02_CurrentClasses\\Telling Stories\\TellingStoriesWithData\\Module2\\data'
setwd(workingdirectory)
subi_forester = read.csv(paste(workingdirectory,"\\subaruForesters_Carbitrage.csv",sep=""))
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
google_token <- create_token(api_key = apiKey)
library(googleway)
google_token <- create_token(api_key = apiKey)
install.packages("ggmap")
install.packages("ggmap")
library(ggplot2)
library(dplyr)
library(ggforce)
library(shiny)
library(ggmap)
#HomePC
workingdirectory = 'E:\\E01_College\\002_CurrentClasses\\03_MBA-694_TellingStoriesWithData\\Telling-Stories-Part-2-SubaruForesters-Dashboard\\data'
setwd(workingdirectory)
subi_forester = read.csv(paste(workingdirectory,"\\subaruForesters_Carbitrage.csv",sep=""))
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google <- (key = apiKey)
destination <- c(subi_forester$latitude[1], subi_forester$longitude[1])
route <- route(from = origin, to = destination, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c(46.86253849006826, -113.98786027490777)
route <- route(from = origin, to = destination, mode = "driving")
register_google <- (key = apiKey)
route <- route(from = origin, to = destination, mode = "driving")
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google <- (key = apiKey)
route <- route(from = origin, to = destination, mode = "driving")
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google <- (key = apiKey)
route <- route(from = origin, to = destination, mode = "driving")
register_google(key = apiKey)
route <- route(from = origin, to = destination, mode = "driving")
travel_distance <- route$routes$legs$distance$text
View(route)
View(route)
route <- route(from = origin, to = destination, mode = "driving")
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google(key = apiKey)
destination <- c(subi_forester$latitude[1], subi_forester$longitude[1])
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c(46.86253849006826, -113.98786027490777)
route <- route(from = origin, to = destination, mode = "driving")
travel_distance <- route$routes$legs$distance$text
destination <- c(45.70750, -112.22912)
destination <- c(45.70750, -112.22912)
route <- route(from = origin, to = destination, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c(46.86253849006826, -113.98786027490777)
route <- route(from = origin, to = destination, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c(46.86253, -113.98786)
route <- route(from = origin, to = destination, mode = "driving")
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google(key = apiKey)
destination <- c(45.70750, -112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c(46.862538490, -113.98786027490777)
route <- route(from = origin, to = destination, mode = "driving")
route <- route(from = origin, to = destination, mode = "driving")
route <- route(from = origin, to = destination, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c(46.862538490, -113.98786027490777)
route <- route(from = origin, to = destination, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c(46.862538, -113.987860)
route <- route(from = origin, to = destination, mode = "driving")
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google(key = apiKey)
destination <- c(45.70750, -112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c(46.862538, -113.987860)
route <- route(from = origin, to = destination, mode = "driving")
travel_distance <- route$routes$legs$distance$text
View(route)
destination <- c("45.70750", "-112.22912")
destination <- c("45.70750", "-112.22912")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c("46.862538", "-113.987860")
route <- route(from = origin, to = destination, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c("46.862538", "-113.987860")
route <- route(from = origin, to = destination, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c("46.862538", "-113.987860")
route <- route(from = origin, to = destination, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c("46.862538, -113.987860")
route <- route(from = origin, to = destination, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c(46.862538, -113.987860)
route <- route(from = origin, to = destination, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c("46.862538", "-113.987860")
route <- route(from = origin, to = destination, mode = "driving")
route <- route(from = origin, to = destination, mode = "driving")
travel_distance <- route$routes$legs$distance$text
route <- route(from = origin, to = destination, mode = "driving")
destination <- c(45.70750, -112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin <- c(46.862538, -113.987860)
route <- route(from = origin, to = destination, mode = "driving")
library(googleway)
library(googleway)
route <- route(origin = origin, to = destination, mode = "driving")
route <- route(from = origin, to = destination, mode = "driving")
google_directions(origin = origin1, destination = destination1, mode = "driving")
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(46.862538, -113.987860)
destination1 <- c(45.70750, -112.22912)
google_directions(origin = origin1, destination = destination1, mode = "driving")
set_key(apiKey)
google_directions(origin = origin1, destination = destination1, mode = "driving")
set_key(apiKey)
google_directions(origin = origin1, destination = destination1, mode = "driving")
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
View(route)
route <- route(from = origin1, to = destination1, mode = "driving")
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
travel_distance <- route$routes$legs$distance$text
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
travel_distance <- route$routes$legs$distance$text
destination1 <- c(latitude =45.70750, longitude = -112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(latitude = 6.862538, longitude = -113.987860)
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
travel_distance <- route$routes$legs
View(route)
route <- route(from = origin1, to = destination1, mode = "driving")
set_key(apiKey)
register_google(key = apiKey)
destination1 <- c(latitude =45.70750, longitude = -112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(latitude = 6.862538, longitude = -113.987860)
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
travel_distance <- route$routes$legs
route <- route(from = origin1, to = destination1, mode = "driving")
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google(key = apiKey)
set_key(apiKey)
destination1 <- c(latitude =45.70750, longitude = -112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(latitude = 6.862538, longitude = -113.987860)
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
travel_distance <- route$routes$legs
destination1 <- c(45.70750,-112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(6.862538,-113.987860)
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
travel_distance <- route$geocoded_waypoints$
route <- route(from = origin1, to = destination1, mode = "driving")
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google(key = apiKey)
set_key(apiKey)
destination1 <- c(45.70750,-112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(6.862538,-113.987860)
route = google_directions(origin = origin1, destination = destination1, mode = "driving")
travel_distance <- route$geocoded_waypoints$
route <- route(from = origin1, to = destination1, mode = "driving")
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving")
# Extract the travel distance
travel_distance <- route$routes$legs$distance$text
# Print the distance
cat("Travel Distance:", travel_distance, "\n")
# Print the distance
cat("Travel Distance:", travel_distance, "\n")
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving")
# Extract the travel distance
travel_distance <- route$routes$legs$distance$text
# Print the distance
cat("Travel Distance:", travel_distance, "\n")
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving")
# Extract the travel distance
travel_distance <- route$routes$legs$distance$value
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving")
# Extract the travel distance
travel_distance <- route$routes$legs$distance$value
# Print the distance
cat("Travel Distance:", travel_distance, "\n")
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google(key = apiKey)
set_key(apiKey)
destination1 <- c(45.70750,-112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(6.862538,-113.987860)
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving")
# Extract the travel distance
travel_distance <- route$routes$legs$distance$value
cat("Travel Distance:", travel_distance, "\n")
# Get directions using google_directions
route <- google_distance(origin = origin1, destination = destination1, mode = "driving")
# Extract the travel distance
travel_distance <- route$routes$legs$distance$value
destination1 <- c(45.70750,-112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(6.862538,-113.987860)
# Get directions using google_directions
route <- google_distance(origin = origin1, destination = destination1, mode = "driving")
# Extract the travel distance
travel_distance <- route$routes$legs$distance$value
# Extract the travel distance
travel_distance <- route$rows$elements
View(travel_distance)
# Get directions using google_directions
route <- google_distance(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
destination1 <- c(45.70750,-112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(46.862538,-113.987860)
# Get directions using google_directions
route <- google_distance(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
# Get directions using google_directions
route <- google_distance(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
destination1 <- c(45.70750,-112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(46.862538,-113.987860)
# Get directions using google_directions
route <- google_distance(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
route = route$routes$legs
route = route$routes$legs[1]
route = route$routes$legs
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
route = route$routes$legs
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google(key = apiKey)
set_key(apiKey)
destination1 <- c(45.70750,-112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(46.862538,-113.987860)
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
route = route$routes$legs
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google(key = apiKey)
set_key(apiKey)
destination1 <- c(45.70750,-112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
origin1 <- c(46.862538,-113.987860)
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
View(route)
route = route$routes$legs
route = route$routes$legs[[1]]
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
View(route)
route = route$routes$legs$[[1]]
route = route$routes$legs[0]
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
route = route$routes$legs[0]
View(route)
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
route = route$routes$legs
View(route)
route2 = route[0]
route2 = route[1]
View(route2)
route2 = route[1][1]
View(route2)
route2 = route[1][1]
View(route2)
route2 = route[1][1][1]
View(route2)
route2 = route[[1]]
route2 = route[[1]]
route2 = route2$distance$value
route2 = route[[1]]
View(route2[[11]][[1]])
route2 = route2$distance$value
#Setting to University of Montana, although this can be optimized to give the user the choice.
missoula <- c(46.862538,-113.987860)
subi_forester = subi_forester %>%
rowwise() %>%
mutate(distance = google_directions(origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey)$routes$legs[[1]]$distance$value)
View(subi_forester)
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value
)
