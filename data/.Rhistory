ggplot(data = unhousedData, mapping = aes(x = Date.Identified, y = Substance.Use))
print(unhousedData$Date.Identified)
print(unhousedData$Date.Identified - unhousedData$Exit.Date)
print(unhousedData$Date.Identified[1] - unhousedData$Exit.Date)[1]
print(as.Date(unhousedData$Date.Identified) - as.Date(unhousedData$Exit.Date))
print(as.Date(unhousedData$Date.Identified)
print(as.Date(unhousedData$Date.Identified))
print(as.Date(unhousedData$Date.Identified))
print(unhousedData$Exit.Date)
datesorter = function(baddate) { # create a function with the name my_function
split_bd = strsplit(baddate, '/')
print(split_bd[1])
}
datesorter(3/4/5)
datesorter('3/4/5')
datesorter('3/4/5')
datesorter('3/4/5')
datesorter = function(baddate) { # create a function with the name my_function
split_bd = strsplit(baddate, '/')
split_bd = unlist(split_bd)
print(split_bd[1])
}
datesorter('3/4/5')
datesorter('4/27/20')
datesorter = function(baddate) { # create a function with the name my_function
split_bd = strsplit(baddate, '/')
split_bd = unlist(split_bd)
if(split_bd[1] < 10){
output = paste("20",split_bd[3],"-","0",split_bd[2],"-",split_bd[1])
}
return(output)
}
datesorter('4/27/20')
datesorter = function(baddate) { # create a function with the name my_function
split_bd = strsplit(baddate, '/')
split_bd = unlist(split_bd)
output = NULL
if(split_bd[1] < 10){
output = paste("20",split_bd[3],"-","0",split_bd[2],"-",split_bd[1])
}
return(output)
}
datesorter('4/27/20')
datesorter = function(baddate) { # create a function with the name my_function
split_bd = strsplit(baddate, '/')
split_bd = unlist(split_bd)
output = NULL
if(split_bd[1] < 10){
output = paste("20",split_bd[3],"-","0",split_bd[2],"-",split_bd[1])
}else{
output = "poop"
}
return(output)
}
datesorter('4/27/20')
output = split_bd[1]
datesorter = function(baddate) { # create a function with the name my_function
split_bd = strsplit(baddate, '/')
split_bd = unlist(split_bd)
output = NULL
if(split_bd[1] < 10){
output = paste("20",split_bd[3],"-","0",split_bd[2],"-",split_bd[1])
}else{
output = split_bd[1]
}
return(output)
}
datesorter('4/27/20')
datesorter = function(baddate) { # create a function with the name my_function
split_bd = strsplit(baddate, '/')
split_bd = unlist(split_bd)
output = NULL
if(as.numeric(split_bd[1]) < 10){
output = paste("20",split_bd[3],"-","0",split_bd[2],"-",split_bd[1])
}else{
output = split_bd[1]
}
return(output)
}
datesorter('4/27/20')
#What we have:4/27/20
#What we want:2020-04-27
datesorter = function(baddate) { # create a function with the name my_function
split_bd = strsplit(baddate, '/')
split_bd = unlist(split_bd)
output = NULL
if(as.numeric(split_bd[1]) < 10){
output = paste("20",split_bd[3],"-","0",split_bd[2],"-",split_bd[1], sep = "")
}else{
output = split_bd[1]
}
return(output)
}
datesorter('4/27/20')
g + geom_violin( linewidth = 1, alpha = 2) +
scale_fill_manual(values=c("#CC3366", "#33cc99", "#ccccff"), guide = "none") +
theme_minimal() +
stat_summary(fun=mean, geom="point", shape=23, size=2, fill = "white") +
scale_x_discrete(name = "Instance(s) of Homelessness",
breaks = c("1", "2", "3"),
labels = c("One", "Two", "Three")) +
ggtitle("63% of Missoula's Unhoused Population \nHave Exited Homelessness Within 250 Days") +
theme(plot.title = element_text(lineheight=.8, face="bold"),panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
geom_hline(yintercept = 250, color = "black", linetype = "solid", size = 1) +
annotate("rect", xmin = -Inf, xmax = Inf, ymin = 0, ymax = 250, fill = "#9999FF", alpha = .3) +
scale_y_continuous(
breaks = c(0, 250, 500, 750, 1000),  # Specify custom x-axis breaks
labels = c("0", "250", "500", "750", "1000"),
name = "Total Days Unhoused",limits = c(-1, 1250))  +
annotate("text", x=3.2, y=500,size = 4.25, label = "Population: 100", color = "#ccccff") +
annotate("text", x=2.2, y=500,size = 4.25, label = "Population: 488", color = "#33cc99") +
annotate("text", x=1.2, y=500,size = 4.25, label = "Population: 2937", color = "#CC3366") +
annotate("text", x=3.4, y=1250,size = 3.50, label = "Average Days Unhoused: â—Š", hjust = 1) +
annotate("text", x=3.5, y=1250,size = 3.00, label = "Source: Missoula's Community Planning, Development, and Innovation Department (CPDI)", hjust=1) +
coord_flip()
#--delete whats in this area, or move it. holy shit it is so noisy in here
g <-
ggplot(merge_test, aes(x = as.character(timesUnhoused), y = (as.numeric(totalTime)), fill = as.character(timesUnhoused)))
library(ggplot2)
library(dplyr)
library(ggforce)
library(ggplot2)
library(dplyr)
library(ggforce)
#HomePC
workingdirectory = 'E:\\E01_College\\002_CurrentClasses\\03_MBA-694_TellingStoriesWithData\\Assignments\\TellingStoriesWithData\\Module1\\data'
entry_year = function(entrydate){
year = strsplit(entry_date, "/")
year = unlist(year)
year = as.numeric(year[3])
if(year > 17 &  month <= 18){
output = 2018
}else if(month > 18 &  month <= 19) {
output = 2019
}else if(month > 19 &  month <= 20) {
output = 2020
}else if(month > 20 &  month <= 21) {
output = 2021
}else if(month > 21 &  month <= 22){
output = 2022
}else{output = "NA"}
return(output)
}
count_by_year <- merge_identified %>%
group_by(monthIdentified) %>%
summarize(count = n()) %>%
ungroup((monthIdentified))
merge_identified = merge_identified %>%
rowwise() %>%
mutate(yearIdentified = entry_year(DateIdentified))
library(ggplot2)
library(dplyr)
library(ggforce)
library(lubridate)
#HomePC
workingdirectory = 'E:\\E01_College\\002_CurrentClasses\\03_MBA-694_TellingStoriesWithData\\Assignments\\TellingStoriesWithData\\Module1\\data'
merge_identified = merge_identified %>%
rowwise() %>%
mutate(yearIdentified = entry_year(DateIdentified))
merge_identified = merge_identified %>%
rowwise() %>%
mutate(yearIdentified = entry_year(DateIdentified))
entry_year = function(entrydate){
year = strsplit(entry_date, "/")
year = unlist(year)
year = as.numeric(year[3])
if(year > 17 &  month <= 18){
output = 2018
}else if(month > 18 &  month <= 19) {
output = 2019
}else if(month > 19 &  month <= 20) {
output = 2020
}else if(month > 20 &  month <= 21) {
output = 2021
}else if(month > 21 &  month <= 22){
output = 2022
}else{output = "NA"}
return(output)
}
print(entry_year("
1/1/19"))
print(entry_year("1/1/19"))
entry_year = function(entrydate){
year = strsplit(entry_date, "/")
year = unlist(year)
year = as.numeric(year[3])
if(year > 17 &  month <= 18){
output = 2018
}else if(month > 18 &  month <= 19) {
output = 2019
}else if(month > 19 &  month <= 20) {
output = 2020
}else if(month > 20 &  month <= 21) {
output = 2021
}else if(month > 21 &  month <= 22){
output = 2022
}else{output = "NA"}
return(output)
entry_year = function(entrydate){
year = strsplit(entrydate, "/")
year = unlist(year)
year = as.numeric(year[3])
if(year > 17 &  month <= 18){
output = 2018
}else if(month > 18 &  month <= 19) {
output = 2019
}else if(month > 19 &  month <= 20) {
output = 2020
}else if(month > 20 &  month <= 21) {
output = 2021
}else if(month > 21 &  month <= 22){
output = 2022
}else{output = "NA"}
return(output)
}
print(entry_year("1/1/19"))
print(entry_year("1/1/19"))
print(entry_year("1/1/19"))
entry_year = function(entrydate){
year = strsplit(entrydate, "/")
year = unlist(year)
year = as.numeric(year[3])
if(year > 17 &  month <= 18){
output = 2018
}else if(month > 18 &  month <= 19) {
output = 2019
}else if(month > 19 &  month <= 20) {
output = 2020
}else if(month > 20 &  month <= 21) {
output = 2021
}else if(month > 21 &  month <= 22){
output = 2022
}else{output = "NA"}
return(output)
}
print(entry_year("1/1/19"))
print(strsplit("1/1/19", "/"))
1
1+1
library(ggplot2)
library(dplyr)
library(ggforce)
library(lubridate)
-2.5^2
df = data.frame()
library(dplyr)
df = df(
"1" = c(1,2,3,4)
)
df = data.frame(
"X" = c(1,2,3,4),
"Cumulative_Prob_F(X)" = c(.1,.5,.8,1),
)
df = data.frame(
"X" = c(1,2,3,4),
"Cumulative_Prob_F(X)" = c(.1,.5,.8,1)
)
df = df %>%
rowwise() %>%
mutate("X*P" = x * Cumulative_Prob_F.X.)
df = df %>%
rowwise() %>%
mutate("X*P" = X * Cumulative_Prob_F.X.)
View(df)
df = data.frame(
"X" = c(1,2,3,4),
"Probability_Dist_P(X)" = c(.1,.4,.3,.2)
"Cumulative_Prob_F(X)" = c(.1,.5,.8,1)
)
df = data.frame(
"X" = c(1,2,3,4),
"Probability_Dist_P(X)" = c(.1,.4,.3,.2),
"Cumulative_Prob_F(X)" = c(.1,.5,.8,1)
)
df = df %>%
rowwise() %>%
mutate("X*P" = X * Probability_Dist_P.X.)
"ExpectedValue_E(X)" = sum(df$`X*P`)
df = df %>%
rowwise() %>%
mutate("(c - E(X))^2*P" = (X - `ExpectedValue_E(X)`)^2*Probability_Dist_P.X.)
variance = sum(df$`(c - E(X))^2*P`)
View(df)
View(df)
horserace = data.frame(
places = c(1,2,3),
probability = c((1/20),(1/10),(1/4)),
cash = c(450,350,150)
)
View(horserace)
horserace = horserace %>%
rowwise() %>%
mutate("X*P" = cash * probability)
ExpectedRaceValue_E(X) = sum(horserace$`X*P`)
ExpectedRaceValue_E(X) = sum(horserace$`X*P')
ExpectedRaceValue_E(X) = sum(horserace$`X*P')
ExpectedRaceValue_E(X) = sum(horserace$`X*P'))
ExpectedRaceValue_E(X) = sum(horserace$`X*P'))
ExpectedRaceValue = sum(horserace$`X*P`)
coindie = data.frame(
values = c("H=1,D=1","H=1,D=1","H=1,D=2","H=1,D=3","H=1,D=4","H=1,D=5","H=1,D=6","H=0,D=1","H=0,D=2","H=0,D=3","H=0,D=4","H=0,D=5","H=0,D=6"),
D = c(0,1,2,3,4,5,1,2,3,4,5,6)
)
coindie = data.frame(
values = c("H=1,D=1","H=1,D=2","H=1,D=3","H=1,D=4","H=1,D=5","H=1,D=6","H=0,D=1","H=0,D=2","H=0,D=3","H=0,D=4","H=0,D=5","H=0,D=6"),
D = c(0,1,2,3,4,5,1,2,3,4,5,6)
)
View(coindie)
coindie2 = data.frame(
D = c(0,1,2,3,4,5,1,2,3,4,5,6),
probability = c((.5*(1/6)),(.5*(1/6)),(.5*(1/6)),(.5*(1/6)),(.5*(1/6)),(.5*(1/6)),(.5*(1/6)))
)
coindie2 = data.frame(
D = c(0,1,2,3,4,5,6),
probability = c((.5*(1/6)),(.5*(1/6)),(.5*(1/6)),(.5*(1/6)),(.5*(1/6)),(.5*(1/6)),(.5*(1/6)))
)
View(coindie2)
coindie2 = coindie2 %>%
mutate("X*P" = D * probability)
expectedValueCoin = sum(coindie2$`X*P`)
View(df)
View(df)
View(coindie2)
coindie2 = coindie2 %>%
rowwise() %>%
mutate("(c - E(X))^2*P" = (D - expectedValueCoin)^2*probability)
#variance
coinvariance = sum(coindie2$`(c - E(X))^2*P`)
coinstdev = sqrt(coinvariance)
DMedian = median(coindie2$D)
mean(coindie2$`X*P`)
View(coindie2)
View(coindie2)
View(coindie)
View(coindie)
#2.   Probability distribution Tbl
coindie2 = data.frame(
D = c(0,1,2,3,4,5,6),
probability = c((.5*(1/6)),2*(.5*(1/6)),2*(.5*(1/6)),2*(.5*(1/6)),2*(.5*(1/6)),2*(.5*(1/6)),2*(.5*(1/6)))
)
coindie2 = coindie2 %>%
mutate("X*P" = D * probability)
#Expected Value
expectedValueCoin = sum(coindie2$`X*P`)
coindie2 = coindie2 %>%
rowwise() %>%
mutate("(c - E(X))^2*P" = (D - expectedValueCoin)^2*probability)
#variance
coinvariance = sum(coindie2$`(c - E(X))^2*P`)
coinstdev = sqrt(coinvariance)
DMedian = median(coindie2$D)
View(coindie2)
View(coindie)
View(coindie)
#2.   Probability distribution Tbl
coindie2 = data.frame(
D = c(0,1,2,3,4,5,6),
probability = c((.5*(1/6)),2*(.5*(1/6)),2*(.5*(1/6)),2*(.5*(1/6)),2*(.5*(1/6)),2*(.5*(1/6)),(.5*(1/6)))
)
coindie2 = coindie2 %>%
mutate("X*P" = D * probability)
#Expected Value
expectedValueCoin = sum(coindie2$`X*P`)
#3.    Standard Deviation
coindie2 = coindie2 %>%
rowwise() %>%
mutate("(c - E(X))^2*P" = (D - expectedValueCoin)^2*probability)
#variance
coinvariance = sum(coindie2$`(c - E(X))^2*P`)
coinstdev = sqrt(coinvariance)
DMedian = median(coindie2$D)
DMedian = median(coindie2$D)
DMedian = median(coindie2$D)
#Chebychev -------
test = (expectedValueCoin + (coinstdev*coinvariance))
View(coindie2)
#Chebychev -------
test = (expectedValueCoin + (2*coinstdev))
test2 = (expectedValueCoin - (2*coinstdev))
test = (expectedValueCoin + (1*coinstdev))
#Less than -0.55
test2 = (expectedValueCoin - (1*coinstdev))
#Greater than 6.55
test = (expectedValueCoin + (2*coinstdev))
#Less than -0.55
test2 = (expectedValueCoin - (2*coinstdev))
wholesale = data.frame(
stores = 1:10,
probability = c(.35,.35,.35,.35,.35,.35,.35,.35,.35,.35)
)
wholesale = wholesale %>%
rowwise() %>%
mutate(PofW = stores * probability)
View(wholesale)
wholesale = data.frame(
stores = 1:10,
probability = c(.35,.35^2,.35^3,.35^4,.35^5,.35^6,.35^7,.35^8,.35^9,.35^10)
)
sum(wholesale$probability)
5!
factorial(5)
wholesale = data.frame(
stores = 1:10,
probability = c(.35,.35,.35,.35,.35,.35,.35,.35,.35,.35)
)
wholesale = wholesale %>%
rowwise() %>%
mutate(PofW = stores * probability)
wholesale = wholesale %>%
rowwise() %>%
mutate(distributions = dbinom(stores, .35))
wholesale = wholesale %>%
rowwise() %>%
mutate(distributions = dbinom(stores, size = 10 ,prob =  .35))
print(wholesale$distributions)
print(wholesale$distributions[1])
View(wholesale)
wholesale$distributions[6]+wholesale$distributions[7]
wholesale$distributions[1]+wholesale$distributions[2]+wholesale$distributions[3]
wholesale$distributions[4]+wholesale$distributions[5]+wholesale$distributions[6]+wholesale$distributions[7]+wholesale$distributions[8]+wholesale$distributions[9]+wholesale$distributions[10]
1-.486
# 1) Probability of at least 4 orders on a given day?
1 - round(pbinom(6, 7, prob = .35, log = FALSE),4)
1 - round(pbinom(3, 7, prob = .35, log = FALSE),4)
# 1) Probability of at least 4 orders on a given day?
1 - round(pbinom(1, 10, prob = .35, log = FALSE),4)
# 1) Probability of at least 4 orders on a given day?
1 - round(pbinom(2, 10, prob = .35, log = FALSE),4)
# 1) Probability of at least 4 orders on a given day?
1 - round(pbinom(3, 10, prob = .35, log = FALSE),4)
# 1) Probability of at least 4 orders on a given day?
1 - round(pbinom(4, 10, prob = .35, log = FALSE),4)
# 1) Probability of at least 4 orders on a given day?
1 - round(pbinom(3, 10, prob = .35, log = FALSE),4)
# I can use qbinom(), which gives the quantile value of x for the specified quantile.
orderOne = qbinom(0.6, 10, 0.35)
orderOne
orderTwo = qbinom(0.10, 10, 0.35)
orderTwo
# 2) There is a 40% chance that at least how many orders will be placed on a given day? What percentile does this represent?
# I can use qbinom(), which gives the quantile value of x for the specified quantile.
orderOne = qbinom(0.6, 10, 0.35)
orderOne
wholesale = wholesale %>%
rowwise() %>%
mutate("(c - E(X))^2*P" = ((stores - expectedValueCoin)^2*distributions))
wholesalevari = sum(wholesale$`(c - E(X))^2*P`)
wholesalestdev = sqrt(wholesalevari)
library(dplyr)
wholesale = wholesale %>%
rowwise() %>%
mutate(distra = probability/distributions)
wholesale = wholesale %>%
rowwise() %>%
mutate(distra = distributions/probability)
sum(wholesale$distra)
wholesale = data.frame(
stores = 1:10,
probability = c(.35,.35,.35,.35,.35,.35,.35,.35,.35,.35)
)
wholesale = wholesale %>%
rowwise() %>%
mutate(denominator_distra = .35^stores)
library(ggplot2)
library(dplyr)
library(ggforce)
library(lubridate)
#-------------Shiny-----------------
library(shiny)
subi_forester = carbit_list %>%
filter(make == "subaru" & model == "forester")
#HomePC
workingdirectory = 'E:\\E01_College\\002_CurrentClasses\\03_MBA-694_TellingStoriesWithData\\Assignments\\TellingStoriesWithData\\Module2_Dashboard\\data'
setwd(workingdirectory)
carbit_list = read.csv(paste(workingdirectory,"\\listing-data.csv",sep=""))
names(carbit_list)
subi_forester = carbit_list %>%
filter(make == "subaru" & model == "forester")
#-------------Shiny-----------------
library(shiny)
ui <- fluidPage(
titlePanel("title panel")
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
)
# Run the app ----
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
)
# Run the app ----
shinyApp(ui = ui, server = server)
