reactive_data <- reactive({
data <- subi_forester[, c(input$xvar, input$yvar)]
filtered_data <- data[data[, input$xvar] <= input$slider, ]
return(filtered_data)
})
# Create the ggplot2 plot based on the reactive data
output$plot <- renderPlot({
ggplot(reactive_data(), aes(x = .data[[input$xvar]], y = .data[[input$yvar]])) +
geom_point()
})
}
shinyApp(ui = ui, server = server)
names(subi_forester)
library(ggplot2)
library(dplyr)
library(ggforce)
library(lubridate)
library(shiny)
#--------Setting-Working-Directory---------------------------------------------------------------------------
#HomePC
workingdirectory = 'E:\\E01_College\\002_CurrentClasses\\03_MBA-694_TellingStoriesWithData\\TellingStories_Dashboard\\Module2_Dashboard\\data'
#Laptop
workingdirectory = 'C:\\Users\\Bangt\\01_College\\02_CurrentClasses\\Telling Stories\\TellingStoriesWithData\\Module2\\data'
setwd(workingdirectory)
#-------------Datasets-----------------
subi_forester = read.csv(paste(workingdirectory,"\\subaruForesters_Carbitrage.csv",sep=""))
names(subi_forester)
#-------------Filtering-----------------
subi_forester = carbit_list %>%
filter(make == "subaru" & model == "forester" & odometer < 200000 & price < 40000) %>%
select(url, location, time_posted, make, model, year, odometer, title, paint,
cylinders, fuel, type, transmission, condition, price, num_images, latitude, longitude)
#Renaming columns
#-------------Shiny-----------------
ui <- fluidPage(
titlePanel("Interactive GGplot2 Example"),
sidebarLayout(
sidebarPanel(
# Add Shiny widgets here (e.g., sliderInput, checkboxInput, selectInput)
sliderInput("slider", "Select a value:", min = 1, max = 40000, value = 5),
# Dropdown menu for x-axis variable
selectInput("xvar", "Select X-axis Variable:", choices = names(subi_forester)[c(7,)], selected = names(subi_forester)[15]),
# Dropdown menu for y-axis variable
selectInput("yvar", "Select Y-axis Variable:", choices = names(subi_forester), selected = names(subi_forester)[7])
),
mainPanel(
plotOutput("plot")  # This is where the ggplot2 plot will be displayed
)
)
)
server <- function(input, output) {
# Create a reactive object that depends on the slider input
reactive_data <- reactive({
data <- subi_forester[, c(input$xvar, input$yvar)]
filtered_data <- data[data[, input$xvar] <= input$slider, ]
return(filtered_data)
})
# Create the ggplot2 plot based on the reactive data
output$plot <- renderPlot({
ggplot(reactive_data(), aes(x = .data[[input$xvar]], y = .data[[input$yvar]])) +
geom_point()
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
print(paste("Probability that the value of the stock is more than $19 = ",
round(punif(19, 16, 25, log = FALSE),4)))
print(paste("Probability that the value of the stock is more than $19 = ",
1-round(punif(19, 16, 25, log = FALSE),4)))
# Find the probability that the value of the stock is more than $19.
print(paste("Probability that the value of the stock is more than $19 = ",
1-round(punif(19, 16, 25, log = FALSE),4)))
print(paste("Probability that the value of the stock is between $19 and $22 = ",
round(punif(19, 16, 25, log = FALSE) - punif(22, 16, 25, log = FALSE),4)))
# Find the probability that the value of the stock is between $19 and $22.
print(paste("Probability that the value of the stock is between $19 and $22 = ",
round(punif(22, 16, 25, log = FALSE) - punif(19, 16, 25, log = FALSE),4)))
# Find the probability that the value of the stock is between $19 and $22.
print(paste("Probability that the value of the stock is between $19 and $22 = ",
round(punif(22, 16, 25, log = FALSE) - punif(19, 16, 25, log = FALSE),4)))
# The upper quartile
print(paste("The 25th percentile is $",qunif(0.25, 16, 25, lower.tail = TRUE, log.p = FALSE)))
# The upper quartile
print(paste("The 25th percentile is $",qunif(0.25, 16, 25, lower.tail = TRUE, log.p = FALSE)))
print(paste("Probability that the value of the stock is more than $21 given the stock is greater than $18 = ",
1-round(punif(21, 18, 25, log = FALSE),4)))
print(paste("Probability that the value of the stock is more than $21 given the stock is greater than $18 = ",
1-round(punif(21, 18, 25, log = FALSE),4)))
print(paste("Probability that the time between two successive visits to the urgent care facility is less than 2 minutes.",
1 - round(pexp(2, (1/7), lower.tail = TRUE, log = FALSE),4)))
print(paste("Probability that the time between two successive visits to the urgent care facility is less than 2 minutes.",
round(pexp(2, (1/7), lower.tail = TRUE, log = FALSE),4)))
#Find the probability that the time between two successive visits to the urgent care facility is more than 15 minutes.
print(paste("Probability that the time between two successive visits to the urgent care facility is more than 15 minutes.",
1-round(pexp(15, (1/7), lower.tail = TRUE, log = FALSE),4)))
print(paste("The 5oth percentile is ", round(qexp(0.50, (1/7), lower.tail = TRUE, log.p = FALSE),4)))
print(paste("probability that the duration of next visit is less than 5 minutess",
round(pexp(5, (1/7), lower.tail = TRUE, log = FALSE),4)))
print(paste("probability that more than eight patients arrive during a half-hour period.",
1-round(ppois(8, 30/7, lower.tail = TRUE, log = FALSE),4)))
print(paste("probability that more than eight patients arrive during a half-hour period.",
1-round(ppois(8, ((1/7)*30), lower.tail = TRUE, log = FALSE),4)))
library(ggplot2)
library(dplyr)
library(ggforce)
library(shiny)
library(ggmap)
library(googleway)
#HomePC
workingdirectory = 'E:\\E01_College\\002_CurrentClasses\\03_MBA-694_TellingStoriesWithData\\Telling-Stories-Part-2-SubaruForesters-Dashboard\\data'
setwd(workingdirectory)
subi_forester = read.csv(paste(workingdirectory,"\\subaruForesters_Carbitrage.csv",sep=""))
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google(key = apiKey)
set_key(apiKey)
destination1 <- c(45.70750,-112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
missoula <- c(46.862538,-113.987860)
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value)
View(subi_forester)
View(subi_forester)
View(subi_forester)
View(subi_forester)
# Get directions using google_directions
route <- google_directions(origin = origin1, destination = destination1, mode = "driving", key = apiKey)
# Get directions using google_directions
route <- google_directions(origin = missoula, destination = c(subi_forester$latitude, subi_forester$longitude), mode = "driving", key = apiKey)
# Get directions using google_directions
route <- google_directions(origin = missoula, destination = c(subi_forester$latitude[1], subi_forester$longitude[1]), mode = "driving", key = apiKey)
route = route$routes$legs
route2 = route[[1]]
route2 = route2$distance$value
View(route)
route = route$routes$legs[[1]]$distance$value
# Get directions using google_directions
route <- google_directions(origin = missoula, destination = c(subi_forester$latitude[1], subi_forester$longitude[1]), mode = "driving", key = apiKey)
route = route$routes$legs[[1]]$distance$value
# Get directions using google_directions
route <- google_directions(origin = missoula, destination = c(subi_forester$latitude[1], subi_forester$longitude[1]), mode = "driving", key = apiKey)$routes$legs[[1]]$distance$value
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(subi_forester$latitude, subi_forester$longitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value)
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value)
subi_forester = read.csv(paste(workingdirectory,"\\subaruForesters_Carbitrage.csv",sep=""))
subi_forester2 <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value)
# Get directions using google_directions
route <- google_directions(origin = missoula, destination = c(subi_forester$latitude[2], subi_forester$longitude[2]), mode = "driving", key = apiKey)$routes$legs[[1]]$distance$value
View(subi_forester2)
library(geodist)
install.packages("geodist")
library(geodist)
subi_forester2 <- subi_forester %>%
mutate(distance = distVincentySphere(missoula, data.frame(latitude, longitude)))
library(geodist)
subi_forester2 <- subi_forester %>%
mutate(distance = distVincentySphere(missoula, data.frame(latitude, longitude)))
install.packages("geosphere")
library(geosphere)
library(geosphere)
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(distance = distHaversine(missoula, c(longitude, latitude)))
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(distance = distHaversine(missoula, c(latitude, longitude)))
subi_forester = read.csv(paste(workingdirectory,"\\subaruForesters_Carbitrage.csv",sep=""))
subi_forester2 <- subi_forester %>%
rowwise() %>%
mutate(distance = distHaversine(missoula, c(latitude, longitude)))
geodist
library(geodist)
subi_forester2 <- subi_forester %>%
mutate(distance = distVincentySphere(missoula, data.frame(latitude, longitude)))
subi_forester2 <- subi_forester %>%
mutate(distance = distVincentySphere(missoula, data.frame(longitude, latitude)))
subi_forester2 <- subi_forester %>%
mutate(distance = distVincentySphere(missoula, data.frame(longitude, latitude)))
subi_forester2 <- subi_forester %>%
mutate(distance = distVincentySphere(missoula, data.frame(latitude, longitude)))
subi_forester = subi_forester %>%
filter(latitude > 0 & latitude < 180 & longitude > 0 & longitude < 180)
subi_forester = read.csv(paste(workingdirectory,"\\subaruForesters_Carbitrage.csv",sep=""))
subi_forester = subi_forester %>%
filter(latitude > 0 & latitude < 180 & longitude > 0 & longitude < 180) %>%
select(url, location, time_posted, make, model, year, odometer, title, paint,
cylinders, fuel, type, transmission, condition, price, num_images, latitude, longitude)
View(subi_forester)
subi_forester = read.csv(paste(workingdirectory,"\\subaruForesters_Carbitrage.csv",sep=""))
subi_forester = subi_forester %>%
filter(latitude > 0 & latitude < 180 & longitude < 0 & longitude > -180) %>%
select(url, location, time_posted, make, model, year, odometer, title, paint,
cylinders, fuel, type, transmission, condition, price, num_images, latitude, longitude)
#Dont want to delete, but isn't working
subi_forester2 <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value)
subi_forester2 <- subi_forester %>%
mutate(distance = distVincentySphere(missoula, data.frame(latitude, longitude)))
subi_forester2 <- subi_forester %>%
mutate(distance = distVincentySphere(missoula, data.frame(latitude, longitude)))
subi_forester2 <- subi_forester %>%
rowwise() %>%
mutate(distance = distVincentySphere(missoula, data.frame(latitude, longitude)))
View(subi_forester2)
subi_forester2 <- subi_forester %>%
rowwise() %>%
mutate(distance = distVincentySphere(missoula, data.frame(latitude, longitude)))
# Get directions using google_directions
route <- google_directions(origin = missoula, destination = c(subi_forester$latitude[2], subi_forester$longitude[2]), mode = "driving", key = apiKey)$routes$legs[[1]]$distance$value
route = route$routes$legs[[1]]$distance$value
# Get directions using google_directions
route <- google_directions(origin = missoula, destination = c(subi_forester$latitude[2], subi_forester$longitude[2]), mode = "driving", key = apiKey)$routes$legs[[1]]$distance$value
subi_forester2 <- subi_forester %>%
rowwise() %>%
mutate(distance = distVincentySphere(missoula, c(latitude, longitude)))
subi_forester2 <- subi_forester %>%
rowwise() %>%
mutate(distance = distVincentySphere(missoula, c(longitude, latitude)))
subi_forester2 <- subi_forester %>%
rowwise() %>%
mutate(distance = distVincentySphere(missoula, c(longitude, latitude)))
library(geosphere)
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(distance = distHaversine(missoula, c(longitude, latitude)))
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(distance = distHaversine(missoula, c(latitude, longitude)))
subi_forester <- subi_forester %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value
)
subi_forester <- subi_forester %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value
)
library(googleway)
subi_forester <- subi_forester %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value
)
apiKey <- "AIzaSyC_Aj4oQDeNKC4M-1fG2tuSIKJkFOFl6Us"
register_google(key = apiKey)
set_key(apiKey)
destination1 <- c(45.70750,-112.22912)
#Setting to University of Montana, although this can be optimized to give the user the choice.
missoula <- c(46.862538,-113.987860)
#Dont want to delete, but isn't working
subi_forester <- subi_forester %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value
)
subi_forester <- subi_forester %>%
mutate(
distance = google_distance(
origin = missoula,
destination = c(latitude, longitude),
mode = "driving",
key = apiKey)$routes$legs[[1]]$distance$value
)
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_distance(
origin = missoula,
destination = data.frame(lon, lat),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value
)
#Dont want to delete, but isn't working
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_distance(
origin = missoula,
destination = data.frame(longitude, latitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value
)
View(subi_forester)
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_directions(
origin = missoula,
destination = data.frame(longitude, latitude),
mode = "driving",
key = apiKey
)$routes$legs[[1]]$distance$value
)
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_directions(origin = missoula, destination = c(latitude, ), mode = "driving", key = apiKey)$routes$legs[[1]]$distance$value
)
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_directions(origin = missoula, destination = c(latitude, longitude ), mode = "driving", key = apiKey)$routes$legs[[1]]$distance$value
)
#Dont want to delete, but isn't working
subi_forester <- subi_forester %>%
rowwise() %>%
mutate(
distance = google_directions(origin = missoula, destination = c(latitude, longitude), mode = "driving", key = apiKey)$routes$legs[[1]]$distance$value
)
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- c(subi_forester$latitude[i], subi_forester$longitude[i])
# Calculate the distance using Google Directions API
route <- google_distance(origin = origin, destination = destination, mode = "driving", key = apiKey)
distance <- route$routes$legs[[1]]$distance$value
# Append the distance to the distances vector
distances <- c(distances, distance)
}
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- c(subi_forester$latitude[i], subi_forester$longitude[i])
# Calculate the distance using Google Directions API
route <- google_distance(origin = missoula, destination = destination, mode = "driving", key = apiKey)
distance <- route$routes$legs[[1]]$distance$value
# Append the distance to the distances vector
distances <- c(distances, distance)
}
distances = ""
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- c(subi_forester$latitude[i], subi_forester$longitude[i])
# Calculate the distance using Google Directions API
route <- google_distance(origin = missoula, destination = destination, mode = "driving", key = apiKey)
distance <- route$routes$legs[[1]]$distance$value
# Append the distance to the distances vector
distances <- c(distances, distance)
}
subi_forester <- subi_forester %>%
mutate(distance = distances)
View(subi_forester)
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- c(subi_forester$latitude[i], subi_forester$longitude[i])
# Calculate the distance using Google Directions API
route <- google_directions(origin = missoula, destination = destination, mode = "driving", key = apiKey)
distance <- route$routes$legs[[1]]$distance$value
# Append the distance to the distances vector
distances <- c(distances, distance)
}
subi_forester <- subi_forester %>%
mutate(distance = distances)
subi_forester2 <- subi_forester %>%
mutate(distance = distances)
distances <- vector("numeric", length = nrow(subi_forester))
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- c(subi_forester$latitude[i], subi_forester$longitude[i])
# Calculate the distance using Google Directions API
route <- google_directions(origin = missoula, destination = destination, mode = "driving", key = apiKey)
distance <- route$routes$legs[[1]]$distance$value
# Append the distance to the distances vector
distances <- c(distances, distance)
}
subi_forester2 <- subi_forester %>%
mutate(distance = distances)
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- data.frame(lon = subi_forester$longitude[i], lat = subi_forester$latitude[i])
route <- google_distance(origin = origin, destination = destination, mode = "driving", key = apiKey)
distances[i] <- route$routes$legs[[1]]$distance$value
}
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- data.frame(lon = subi_forester$longitude[i], lat = subi_forester$latitude[i])
route <- google_distance(origin = origin, destination = destination, mode = "driving", key = apiKey)
distances[i] <- route$routes$legs[[1]]$distance$value
}
distances <- vector("numeric", length = nrow(subi_forester))
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- data.frame(lon = subi_forester$longitude[i], lat = subi_forester$latitude[i])
route <- google_distance(origin = origin, destination = destination, mode = "driving", key = apiKey)
distances[i] <- route$routes$legs[[1]]$distance$value
}
View(subi_forester)
distances <- vector("numeric", length = nrow(subi_forester))
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- data.frame(lon = subi_forester$longitude[i], lat = subi_forester$latitude[i])
route <- google_distance(origin = origin, destination = destination, mode = "driving", key = apiKey)
distances[i] <- route$routes$legs[[1]]$distance$value
}
#HomePC
workingdirectory = 'E:\\E01_College\\002_CurrentClasses\\03_MBA-694_TellingStoriesWithData\\Telling-Stories-Part-2-SubaruForesters-Dashboard\\data'
setwd(workingdirectory)
subi_forester = read.csv(paste(workingdirectory,"\\subaruForesters_Carbitrage.csv",sep=""))
distances <- vector("numeric", length = nrow(subi_forester))
# Calculate distances using Google Directions API and store them in the vector
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- data.frame(lon = subi_forester$longitude[i], lat = subi_forester$latitude[i])
route <- google_distance(origin = origin, destination = destination, mode = "driving", key = apiKey)
distances[i] <- route$routes$legs[[1]]$distance$value
}
# Calculate distances using Google Directions API and store them in the vector
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- data.frame(lon = subi_forester$longitude[i], lat = subi_forester$latitude[i])
tryCatch(
{
route <- google_distance(origin = origin, destination = destination, mode = "driving", key = apiKey)
distances[i] <- route$routes$legs[[1]]$distance$value
},
error = function(e) {
# Handle errors, for example, by setting a special value or NA for distances
distances[i] <- NA
}
)
}
subi_forester2 <- subi_forester %>%
mutate(distance = distances)
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- data.frame(lon = subi_forester$longitude[i], lat = subi_forester$latitude[i])
tryCatch(
{
route <- google_distance(origin = c(46.862538,-113.987860), destination = c(subi_forester$latitude[i], subi_forester$longitude[i]), mode = "driving", key = apiKey)
distances[i] <- route$routes$legs[[1]]$distance$value
},
error = function(e) {
# Handle errors, for example, by setting a special value or NA for distances
distances[i] <- NA
}
)
}
subi_forester2 <- subi_forester %>%
mutate(distance = distances)
for (i in 1:nrow(subi_forester)) {
origin <- missoula
destination <- data.frame(lon = subi_forester$longitude[i], lat = subi_forester$latitude[i])
tryCatch(
{
route <- google_directions(origin = c(46.862538,-113.987860), destination = c(subi_forester$latitude[i], subi_forester$longitude[i]), mode = "driving", key = apiKey)
distances[i] <- route$routes$legs[[1]]$distance$value
},
error = function(e) {
# Handle errors, for example, by setting a special value or NA for distances
distances[i] <- NA
}
)
}
subi_forester2 <- subi_forester %>%
mutate(distance = distances)
write.csv(subi_forester2, file = "subiforester2.csv", row.names = FALSE)
#with distances
subi_forester3 = read.csv(paste(workingdirectory,"\\subiforester2.csv",sep=""))
View(subi_forester3)
